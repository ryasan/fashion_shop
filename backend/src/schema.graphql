# import * from './generated/prisma.graphql'

type Query {
  me: User
  users(where: UserWhereInput): [User]!
  product(where: ProductWhereUniqueInput): Product
  products(where: ProductWhereInput): [Product]!
  productsConnection(
    freeShippingSelected: Boolean
    sizeFilters: [Size]
    categoryFilters: [Category]
    orderBy: ProductOrderByInput
    first: Int
    skip: Int
  ): ProductConnection!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput): [Order]!
  ordersConnection(
    where: OrderWhereInput
    orderBy: OrderOrderByInput
    skip: Int
    first: Int
  ): OrderConnection!
}

type Mutation {
  createProduct(data: ProductCreateInput): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  createCartItem(data: CartItemCreateInput!): CartItem!
  uploadCart(data: [CartUploadInput!]!): [CartItem]
  deleteMe: SuccessMessage
  deleteUser(where: UserWhereUniqueInput!): User
  updatePermissions(permissions: [Permission!]!, userId: ID!): User
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  signup(email: String!, username: String!, password: String!): User!
  updateProduct(
    data: ProductUpdateInput!
    where: ProductWhereUniqueInput!
  ): Product
  createOrder(token: String!): Order!
  requestReset(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!, confirm: String!): User!
  sendContactMessage(
    name: String
    email: String
    message: String
  ): SuccessMessage
}

type User {
  id: ID!
  email: String!
  username: String!
  password: String!
  cart: [CartItem!]
  orders: [OrderItem]
  permissions: [Permission!]!
}

type CartItem {
  id: ID!
  quantity: Int!
  product: Product!
  size: Size
  user: User!
}

type Product {
  id: ID!
  description: String!
  isFreeShipping: Boolean!
  isFeatured: Boolean!
  isAvailable: Boolean
  price: Int!
  sku: String!
  style: String!
  title: String!
  availableSizes: [Size!]
  category: Category!
  images: [String]!
}

type SuccessMessage {
  message: String!
}

input CartUploadInput {
  quantity: Int!
  productId: ID!
  size: Size
}
